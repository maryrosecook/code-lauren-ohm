CodeLauren {
  Start = ExpressionList

  ExpressionList = listOf<Expression, eol>
  Expression = Forever | Invocation | Conditional | Assignment | Lambda | Literal | identifierLookup

  Lambda = "{" ParameterList ExpressionList "}"
  ParameterList = listOf<Parameter, space>
  Parameter = "?" identifier

  Invocation = Invocable "(" ArgumentList ")"
  ArgumentList = listOf<Expression, space>

  Invocable = Conditional | Lambda | identifierLookup

  Assignment = identifier ":" Expression

  Forever = "forever" Block

  Block = Lambda

  Conditional = If Elseif* Else?
  If = "if" Expression Block
  Elseif = "elseif" Expression Block
  Else = "else" Block

  identifierLookup = identifier
  identifier = ~keyword letter alnum*

  Literal = number | string | boolean
  number = "-"? digit+ ("." digit+)?
  string = "\"" (alnum | "-" | "." | "," | "#" | space)* "\""
  boolean = "true" | "false"

  keyword = "if" | "elseif" | "else" | "forever" | "true" | "false"

  eol = space_no_newline* "\n" space_no_newline*
  space_no_newline = " " | "\r" | "\t"
}
